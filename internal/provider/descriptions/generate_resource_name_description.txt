Generates standardized, consistent resource names for cloud resources following naming best practices.

This function applies cloud provider specific naming patterns based on resource type, and allows customizing
all aspects of the name. It supports Microsoft's Cloud Adoption Framework (CAF) for Azure, AWS Well-Architected
Framework (WAF) for AWS, and Google Cloud's recommended naming conventions.

The function replaces placeholders in naming patterns with the provided component values. For example, a pattern
like "vm-{basename}-{environment:short}-{region:short}" would be populated with the values provided for basename,
environment, and region.

Each component can be specified in three formats:
- fullname: The complete value (e.g., "production", "eastus")
- shortcode: A shortened version (e.g., "prod", "eus")
- char: A single character (e.g., "p", "e")

The naming pattern determines which format is used by adding a suffix to the placeholder:
- {component} uses fullname
- {component:short} uses shortcode
- {component:char} uses the single character

Parameter Structure Documentation
===============================

The generate_resource_name function accepts various parameters that control how resource names are generated.
This documentation explains the parameter structure, supported components, and how to use the extension points.

Most of these parameters are optional, and the function might use default values from the provider configuration
if not provided or from the default built-in patterns.

Core Components
--------------
Each core component provides information about a specific aspect of the resource naming. Components have three
possible representations:

- fullname: Complete/long form (e.g., "production", "eastus")
- shortcode: Abbreviated form (e.g., "prod", "eus")
- char: Single character representation (e.g., "p", "e")

The naming pattern determines which representation is used:
- {component} uses fullname
- {component:short} uses shortcode
- {component:char} uses single character

All of the supported components are listed below. You can use these components to create a resource name that is
consistent and meaningful. The components are categorized into four main groups: Core Resource Components, Organization
Components, Provider-Specific Components, and Initiative/Solution Components.

Apart from the required component element fullname, the other two elements (shortcode and char) are optional.
If these elements are not provided, the function will calculate the values based on the fullname value:
- The shortcode is generated by taking the first three characters of the fullname value.
- The char is generated by taking the first character of the fullname value.

All of these components are optional, and the function will use default values from the provider configuration if
not provided. The default values can be set in the provider block via the provider configuration, using the following
format:
```hcl
provider "resourcenamingtool" {
  	default_resource_type = {
		fullname = "azurerm_resource_group"
		shortcode = "rg"
		char = "r"
	}

	default_region = {
		fullname = "eastus"
		shortcode = "eus"
		char = "e"
	}
}
```
Supported components:

1. Core Resource Components:
   - resource_type: Type of resource being created (e.g., "azurerm_virtual_machine", "aws_s3_bucket")
     - Example:
```hcl
resource_type = {
	"fullname" = "azurerm_resource_group"
	"shortcode" = "rg"
	"char"      = "r"
}
```
   - resource_prefix: Prefix before the resource type abbreviation (e.g., "shared", "core")
     - Example:
```hcl
resource_prefix = {
	"fullname" = "shared"
	"shortcode" = "sh"
	"char"      = "s"
}
```
   - basename: Core identifying name for the resource (e.g., "webapp", "payroll")
     - Example:
```hcl
basename = {
	"fullname" = "data"
	"shortcode" = "d"
	"char"      = "d"
}
```
   - environment: Deployment environment (e.g., "development", "production")
     - Example:
```hcl
environment = {
	"fullname" = "production"
	"shortcode" = "prod"
	"char"      = "p"
}
```
   - region: Cloud region where the resource is deployed (e.g., "eastus", "us-west-2")
     - Example:
```hcl
region = {
	"fullname" = "westeurope"
	"shortcode" = "weu"
	"char"      = "w"
}
```
   - instance: Instance identifier for multiple instances of the same resource (e.g., "01", "02")
     - Example:
```hcl
instance = {
	"fullname" = "001"
	"shortcode" = "01"
	"char"      = "1"
}
```

2. Organization Components:
   - organization: Organization owning the resource (e.g., "contoso", "fabrikam")
     - Example:
```hcl
organization = {
	"fullname" = "contoso"
	"shortcode" = "cts"
	"char"      = "c"
}
```
   - business_unit: Business unit within the organization (e.g., "finance", "hr")
     - Example:
```hcl
business_unit = {
	"fullname" = "finance"
	"shortcode" = "fin"
	"char"      = "f"
}
```
   - cost_center: Financial cost center (e.g., "cc123", "marketing")
     - Example:
```hcl
cost_center = {
	"fullname" = "cc123"
	"shortcode" = "cc"
	"char"      = "c"
}
```
   - project: Project associated with the resource (e.g., "website-redesign")
     - Example:
```hcl
project = {
	"fullname" = "website-redesign"
	"shortcode" = "wr"
	"char"      = "w"
}
```
   - application: Application using the resource (e.g., "inventory-system")
     - Example:
```hcl
application = {
	"fullname" = "inventory"
	"shortcode" = "inv"
	"char"      = "i"
}
```
   - workload: Function or purpose of the workload (e.g., "api", "web", "batch")
     - Example:
```hcl
workload = {
	"fullname" = "api"
	"shortcode" = "api"
	"char"      = "a"
}
```

3. Provider-Specific Components:
   - subscription: Subscription context, primarily for Azure (e.g., "saas-prod-01", "dev")
     - Example:
```hcl
subscription = {
	"fullname" = "saas-prod-01"
	"shortcode" = "sp01"
	"char"      = "p"
}
```
   - location: Alternative to region for some cloud providers (e.g., "eastus")
     - Example:
```hcl
location = {
	"fullname" = "East US"
	"shortcode" = "eastus"
	"char"      = "e"
}
```
   - domain: Domain name or business domain for resources that require one (e.g., "contoso.com", "observability", "hosting")
     - Example:
```hcl
domain = {
	"fullname" = "observability"
	"shortcode" = "obs"
	"char"      = "o"
}
```
   - criticality: Importance of the resource (e.g., "high", "medium", "low")
     - Example:
```hcl
criticality = {
	"fullname" = "high"
	"shortcode" = "h"
	"char"      = "h"
}
```

4. Initiative/Solution Components:
   - initiative: Business initiative the resource belongs to (e.g., "cloud-migration")
     - Example:
```hcl
initiative = {
	"fullname" = "cloud-migration"
	"shortcode" = "cm"
	"char"      = "c"
}
```
   - solution: Solution name, architecture or pattern (e.g., "RSAT", "microservices", "data-lake")
     - Example:
```hcl
solution = {
	"fullname" = "data-lake"
	"shortcode" = "dl"
	"char"      = "d"
}
```

Extension Points
--------------

All of these extension points are optional, and the function will merge these with built-in
values, and values from the provider configuration, using the following
format:
```hcl
provider "resourcenamingtool" {
  	additional_naming_patterns = {
		"elk_cluster_node" = "{basename}{environment:char}{region:char}{instance:char}"
		"custom_resource" = "{resource_type:short}-{basename}-{environment:short}"
		"azurerm_logic_app_workflow" = "logic-{basename}-{environment:short}-custom"
	}
}
```

1. additional_naming_patterns (Map Structure)
   A map of custom naming patterns for specific resource types. Keys are resource type identifiers,
   values are pattern strings with component placeholders.

   Format:
   additional_naming_patterns = {
     "resource_type_name" = "pattern-with-{placeholders}"
   }

   Examples:
   additional_naming_patterns = {
     "custom_resource" = "{resource_type:short}-{basename}-{environment:short}"
     "azurerm_logic_app_workflow" = "logic-{basename}-{environment:short}-custom"
   }

2. additional_components (Map Structure)
   A map of custom component values that can be used in naming patterns. This allows
   extending the provider with your own naming components.

   Format:
   additional_components = {
     "component_name.fullname" = "full value"
     "component_name.shortcode" = "short value"
     "component_name.char" = "c"
   }

   Example:
   additional_components = {
     "department.fullname" = "engineering"
     "department.shortcode" = "eng"
     "department.char" = "e"
     "team.fullname" = "platform"
     "team.shortcode" = "plf"
     "team.char" = "p"
   }

   Using Custom Components in Patterns:
   To use a custom component in a pattern, include it as {component_name} in your pattern.

   Example Pattern Using Custom Components:
   "app-{basename}-{department:short}-{team:char}"

Complete Example
===============

Generating a resource name with component values, custom patterns, and custom components:

```hcl
resource "arm_storage_account" "backup_prod" {
  name                     = provider::resourcenamingtool::generate_resource_name(
    [
      {
        resource_type = {
          "fullname"  = "storage_account"
          "shortcode" = "st"
          "char"      = "s"
        },
        additional_components = {
          "slug.fullname"  = "backup"
          "slug.shortcode" = "bkp"
          "slug.char"      = "b"
          "slot.fullname"  = "prod"
          "slot.shortcode" = "prd"
          "slot.char"      = "p"
        },
        additional_naming_patterns = {
          "storage_account" = "{resource_type:short}{slug:short}{region:short}{slot:char}{instance}"
        }
      }
    ]
  )
  resource_group_name      = provider::resourcenamingtool::generate_resource_name(
    [
      {
        resource_type = {
          "fullname"  = "resource_group"
        }
      }
    ]
  )
  account_tier             = "Standard"
  account_replication_type = "LRS"
}
```
