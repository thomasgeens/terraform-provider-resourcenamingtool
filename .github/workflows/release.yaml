# Terraform Provider release workflow.
name: CD - Create version release package

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - v*
  workflow_call:
    inputs:
      new_release_git_tag:
        required: true
        type: string
    secrets:
      GPG_PRIVATE_KEY:
        required: true
      GPG_PASSPHRASE:
        required: true

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  goreleaser:
    name: Run GoReleaser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
          # Use the tag from the workflow_run output to ensure we are on the correct commit.
          # This is necessary because the workflow_run event does not provide the commit SHA.
          # This is especially important for the `goreleaser` job, which needs to create a release package
          # based on the tag created by the `semantic_versioning` job.
          ref: ${{ github.event.inputs.new_release_git_tag || github.ref_name }}
      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod
          cache: true
      - name: Import GPG key for signing
        uses: crazy-max/ghaction-import-gpg@v6.3.0
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          fingerprint: ${{ vars.GPG_FINGERPRINT }}
      - name: Create release package with GoReleaser
        uses: goreleaser/goreleaser-action@v6.3.0
        with:
          version: ~> v2
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}